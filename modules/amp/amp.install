<?php

use Drupal\image\Entity\ImageStyle;
use Drupal\image\ImageStyleInterface;

/**
 * Implements hook_requirements().
 */
function amp_requirements($phase) {
  $requirements = [];
  if ($phase == 'install' || $phase == 'runtime') {
    if (!class_exists('\Lullabot\AMP\AMP')) {
      $requirements['amp_library'] = [
        'title' => t('AMP'),
        'value' => t('Not available'),
        'description' => t('The AMP module requires the PHP <a href="@library">AMP library</a>.', ['@library' => 'https://github.com/Lullabot/amp-library']),
        'severity' => REQUIREMENT_ERROR,
      ];
    }

    if ($phase == 'runtime') {
      $module_handler = \Drupal::service('module_handler');
      if (!$module_handler->moduleExists('token')) {
        $requirements['amp_token'] = [
          'title' => t('Token module required for AMP'),
          'value' => t('Not installed'),
          'description' => t('The AMP module requires the <a href="@module">Token</a> module as a dependency. Please download and install Token to prevent errors with AMP.', ['@module' => 'https://www.drupal.org/project/token']),
          'severity' => REQUIREMENT_ERROR,
        ];
      }

      $theme_handler = \Drupal::service('theme_handler');
      if (!$theme_handler->themeExists('amptheme')) {
        $requirements['amptheme'] = [
          'title' => t('AMP Base Theme'),
          'value' => t('Not installed'),
          'description' => t('The AMP module requires the <a href="@theme">AMP Base Theme</a> to be installed.', ['@theme' => 'https://www.drupal.org/project/amptheme']),
          'severity' => REQUIREMENT_ERROR,
        ];
      }
    }
  }
  return $requirements;
}

/**
 * Remove node_types from amp.settings.
 */
function amp_update_8001(&$sandbox) {
  $config = \Drupal::service('config.factory')->getEditable('amp.settings');
  $config->clear('node_types')->save();
}

/**
 * Create the new AMP metadata config entity on existing sites and add AMP
 * image styles on existing sites.
 */
function amp_update_8002() {
  \Drupal::entityDefinitionUpdateManager()->applyUpdates();

  // Add image style for content image if it does not yet exist.
  $content_image = [
    'name' => 'image.style.amp_metadata_content_image_min_696px_wide',
    'label' => 'AMP Metadata: Content image (696px wide)',
    'effect_name' => 'image_scale',
    'effect_data' => [
      'width' => 696,
      'height' => null,
      'upscale' => true
    ]
  ];
  _amp_update_create_image_style($content_image['name'], $content_image['label'], $content_image['effect_name'], $content_image['effect_data']);

  // Add image style for logo image if it does not yet exist.
  $logo_image = [
    'name' => 'image.style.amp_metadata_logo_600x60',
    'label' => 'AMP Metadata: Logo (600x60)',
    'effect_name' => 'image_scale',
    'effect_data' => [
      'width' => 600,
      'height' => 60,
      'upscale' => false
    ]
  ];
  _amp_update_create_image_style($logo_image['name'], $logo_image['label'], $logo_image['effect_name'], $logo_image['effect_data']);
}

/**
 * Helper function to create image style configuration objects for an update.
 *
 * @param string $name
 *   The name of the config object.
 * @param string $label
 *   The label for the image style.
 * @param string $effect_name
 *   The name of the image effect.
 * @param array $effect_data
 *   The image style effect data.
 */
function _amp_update_create_image_style($name, $label, $effect_name, array $effect_data) {
  if (!\Drupal::service('config.storage')->exists($name)) {
    /** @var ImageStyleInterface $image_style */
    $image_style = ImageStyle::create([
      'name' => $name,
      'label' => $label
    ]);
    $image_style->addImageEffect([
      'id' => $effect_name,
      'data' => $effect_data,
      'weight' => 1,
    ]);
    $image_style->save();
  }
}
